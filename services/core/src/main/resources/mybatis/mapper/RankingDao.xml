<?xml version="1.0" encoding="UTF-8" ?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cloud.oj.core.dao.RankingDao">
    <!-- 查询排名 -->
    <select id="getRanking" resultMap="Map.Ranking, Map.Total">
        select sql_calc_found_rows (@ranking := @ranking + 1) as `rank`,
                                   r.*
        from (select u.user_id,
                     u.name,
                     u.has_avatar,
                     committed,
                     passed,
                     truncate(score, 2) as score
              from leaderboard l
                       join user u on l.deleted = false and l.user_id = u.user_id
              where u.role_id = 1
                and score &gt; 0
              order by score desc, update_time) r,
             (select @ranking := #{start}) rn
        limit #{start}, #{limit};
        select found_rows();
    </select>
    <!-- 查询指定竞赛的排名 -->
    <select id="getContestRanking" resultMap="Map.Ranking, Map.Total">
        select sql_calc_found_rows (@ranking := @ranking + 1) as `rank`,
                                   r.*
        from (select u.user_id,
                     u.name,
                     u.has_avatar,
                     committed,
                     passed,
                     truncate(score, 2) as score
              from leaderboard_contest lc
                       join user u on lc.deleted = false and lc.user_id = u.user_id
              where contest_id = #{contestId}
                and u.role_id = 1
                and score &gt; 0
              order by score desc, update_time) r,
             (select @ranking := #{start}) rn
        limit #{start}, #{limit};
        select found_rows();
    </select>
    <!-- 查询用户在指定竞赛中的分数构成 -->
    <select id="getDetailById" resultType="cloud.oj.core.entity.Solution">
        select problem_id,
               title,
               max(pass_rate) as pass_rate,
               max(score)     as score
        from judge_result
        where state + 0 = 1
          and contest_id = #{contestId}
          and user_id = #{userId}
        group by problem_id, title
        order by problem_id;
    </select>
    <!-- 根据用户 id 逻辑删除排名 -->
    <update id="deleteByUser">
        update leaderboard
        set deleted = true
        where user_id = #{userId}
    </update>
</mapper>