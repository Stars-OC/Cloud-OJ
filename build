#!/bin/bash
set -e
GREEN="\e[32m"
RED="\e[31m"
CLR="\e[0m"
CONF_DIR="/etc/cloud-oj"
DATA_DIR="/var/lib/cloud-oj"
INSTALL_DIR="/usr/local/cloud-oj"
ORIGINAL_DIR=$(pwd)
SCRIPT=$(readlink -f "$0")
WORKING_DIR=$(dirname "${SCRIPT}")

function has_command() {
  which "$1" &>/dev/null
}

# make sure working directory is correct
cd "${WORKING_DIR}"

# clean && exit
if [ "$1" == "clean" ]; then
  cd services && mvn clean && cd ..
  if [ -d "judge/cmake-build-debug" ]; then
    rm -r judge/cmake-build-debug
  fi
  if [ -d "judge/cmake-build-release" ]; then
    rm -r judge/cmake-build-release
  fi
  if [ -d "web/dist" ]; then
    rm -r web/dist
  fi
  echo -e "${GREEN}CLEAN COMPLETE.${CLR}"
  cd "${ORIGINAL_DIR}"
  exit 0
fi

# build
echo -e "${GREEN}BUILD START...${CLR}"
if cd judge && bash build; then
  cd ..
else
  cd "${ORIGINAL_DIR}"
  echo -e "${RED}CMAKE BUILD FAILED.${CLR}"
  exit 1
fi
if cd web && npm install && npm run build; then
  cd ..
else
  cd "${ORIGINAL_DIR}"
  echo -e "${RED}NPM BUILD FAILED.${CLR}"
  exit 1
fi
if cd services && mvn clean -B package '-Dmaven.test.skip=true'; then
  cd ..
else
  cd "${ORIGINAL_DIR}"
  echo -e "${RED}MAVEN BUILD FAILED.${CLR}"
  exit 1
fi
echo -e "${GREEN}BUILD COMPLETE.${CLR}"

# build docker images
if [ "$1" == "docker" ]; then
  echo -e "${GREEN}DOCKER BUILD...${CLR}"
  mkdir services/judge/target/bin
  cp judge/cmake-build-release/{judge,judged} services/judge/target/bin/
  docker build -t cloudoj-web web
  docker build -t cloudoj-registry services/registry
  docker build -t cloudoj-gateway services/gateway
  docker build -t cloudoj-storage services/storage
  docker build -t cloudoj-core services/core
  docker build -t cloudoj-judge services/judge
  docker images | grep cloudoj
  if [ ! -d "${INSTALL_DIR}/sql" ]; then
    sudo mkdir -p ${INSTALL_DIR}/sql
    sudo cp dev/sql/* ${INSTALL_DIR}/sql/
    sudo cp -r dev/docker/* ${INSTALL_DIR}/
  fi
  echo -e "${GREEN}DOCKER BUILD COMPLETE.${CLR}"
  cd "${ORIGINAL_DIR}"
  exit 0
fi

# install to /usr/local
if [ "$1" == "install" ]; then
  echo -e "${GREEN}INSTALL...${CLR}"
  sudo useradd judge || true
  sudo mkdir -p ${INSTALL_DIR}/web ${INSTALL_DIR}/bin ${INSTALL_DIR}/services/lib ${CONF_DIR} ${DATA_DIR}
  sudo chown judge ${DATA_DIR}
  # judge, judged
  sudo cp judge/cmake-build-release/{judge,judged} ${INSTALL_DIR}/bin/
  sudo ln -sf ${INSTALL_DIR}/bin/judge /usr/local/bin/judge
  sudo ln -sf ${INSTALL_DIR}/bin/judged /usr/local/bin/judged
  # web and services
  sudo cp -r web/dist/* ${INSTALL_DIR}/web/
  sudo cp services/gateway/target/*.jar ${INSTALL_DIR}/services/gateway.jar
  sudo cp services/registry/target/*.jar ${INSTALL_DIR}/services/registry.jar
  sudo cp services/storage/target/*.jar ${INSTALL_DIR}/services/storage.jar
  sudo cp services/core/target/*.jar ${INSTALL_DIR}/services/core.jar
  sudo cp services/judge/target/*.jar ${INSTALL_DIR}/services/judge.jar
  # dependencies
  sudo cp -rn \
    services/gateway/target/lib/* \
    services/registry/target/lib/* \
    services/storage/target/lib/* \
    services/core/target/lib/* \
    services/judge/target/lib/* \
    ${INSTALL_DIR}/services/lib/
  programs="unzip nginx supervisor rabbitmq-server mariadb-server"
  if has_command apt-get; then
    sudo apt-get install -y "${programs}"
  elif has_command dnf; then
    sudo dnf install -y "${programs}"
  fi
  curl -LJo /tmp/consul.zip https://releases.hashicorp.com/consul/1.15.1/consul_1.15.1_linux_amd64.zip
  sudo unzip -d /usr/bin /tmp/consul.zip && rm /tmp/consul.zip
  sudo cat dev/sql/schema.sql | sudo mariadb -u root
  sudo mariadb -u root -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'root';"
  sudo rabbitmqctl add_user admin admin
  sudo rabbitmqctl set_user_tags admin administrator
  sudo rabbitmqctl set_permissions -p / admin ".*" ".*" ".*"
  # supervisor and nginx conf
  sudo cp -r dev/conf/*.conf ${CONF_DIR}/
  sudo ln -sf ${CONF_DIR}/nginx.conf /etc/nginx/sites-enabled/default
  echo -e "${GREEN}INSTALL COMPLETE.${CLR}"
fi
cd "${ORIGINAL_DIR}"
